// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String @id @default(uuid())
  email     String @unique @db.VarChar(200)
  cognitoId String @unique @default(uuid())
  tenant    Tenant @relation(fields: [tenantId], references: [id])
  tenantId  String @default(uuid())
}

model Tenant {
  id              String            @id @default(uuid())
  cognitoId       String            @unique @default(uuid())
  User            User[]
  client          Client[]
  proposal        Proposal[]
  categoryService CategoryService[]
  modelProposal   ModelProposal[]
}

model Client {
  id           Int        @id @default(autoincrement())
  name         String     @db.VarChar(200)
  contactName  String?    @db.VarChar(100)
  contactPhone String?    @db.VarChar(11)
  cpfCnpj      String     @unique @db.VarChar(14)
  tenant       Tenant     @relation(fields: [tenantId], references: [id])
  tenantId     String     @default(uuid())
  proposal     Proposal[]
}

model Proposal {
  id                  Int               @id @default(autoincrement())
  sendDate            DateTime?
  installmentsBalance Int?
  periodValidity      DateTime?
  discount            Int?
  percentageEntry     Int?
  guaranteePeriod     Int?
  approved            Boolean?          @default(false)
  client              Client            @relation(fields: [clientId], references: [id])
  clientId            Int
  tenant              Tenant            @relation(fields: [tenantId], references: [id])
  tenantId            String            @default(uuid())
  detection           Detection[]
  well                Well[]
  ProposalService     ProposalService[]
  ItemProposal        ItemProposal[]
}

model CategoryService {
  id              Int               @id @default(autoincrement())
  name            String            @unique @db.VarChar(100)
  subCategory     SubCategory
  color           String            @db.VarChar(7)
  tenant          Tenant            @relation(fields: [tenantId], references: [id])
  tenantId        String            @default(uuid())
  itemService     ItemService[]
  ProposalService ProposalService[]

  @@unique([color, tenantId])
}

enum SubCategory {
  SUPLIE
  SERVICE
}

model ItemService {
  id                Int                 @id @default(autoincrement())
  name              String              @unique @db.VarChar(100)
  description       String?             @db.VarChar(400)
  unit              String              @db.VarChar(3)
  status            Status
  categoryService   CategoryService     @relation(fields: [categoryServiceId], references: [id])
  categoryServiceId Int
  itemProposal      ItemProposal[]
  modelItemCategory ModelItemCategory[]
}

model ItemProposal {
  id                Int             @id @default(autoincrement())
  unitPrice         Int
  quantity          Int
  proposalService   ProposalService @relation(fields: [proposalServiceId], references: [id])
  proposalServiceId Int
  itemService       ItemService     @relation(fields: [itemServiceId], references: [id])
  itemServiceId     Int
  Proposal          Proposal?       @relation(fields: [proposalId], references: [id])
  proposalId        Int?
}

model ProposalService {
  id                Int             @id @default(autoincrement())
  order             Int
  side              Side
  proposalId        Int
  proposal          Proposal        @relation(fields: [proposalId], references: [id])
  categoryServiceId Int
  CategoryService   CategoryService @relation(fields: [categoryServiceId], references: [id])
  ItemProposal      ItemProposal[]

  @@unique([side, order, proposalId])
  @@unique([categoryServiceId, proposalId])
}

model ModelProposal {
  id                Int                 @id @default(autoincrement())
  name              String              @unique @db.VarChar(100)
  tenant            Tenant              @relation(fields: [tenantId], references: [id])
  tenantId          String              @default(uuid())
  modelItemCategory ModelItemCategory[]
}

model ModelItemCategory {
  id              Int           @id @default(autoincrement())
  modelProposal   ModelProposal @relation(fields: [modelProposalId], references: [id])
  modelProposalId Int
  itemService     ItemService   @relation(fields: [itemServiceId], references: [id])
  itemServiceId   Int
}

model Detection {
  id           Int      @id @default(autoincrement())
  accuracy     Int
  salinity     Int
  maximumDepth Int
  minimumDepth Int
  proposal     Proposal @relation(fields: [proposalId], references: [id])
  proposalId   Int
}

model Well {
  id               Int       @id @default(autoincrement())
  voltage          Voltage?
  totalDepth       Int?
  sieveDepth       Int?
  staticLevel      Int?
  dynamicLevel     Int?
  deliveryDate     DateTime?
  sedimentaryDepth Int?
  distric          String?   @db.VarChar(100)
  zipcode          String?   @db.VarChar(8)
  street           String?   @db.VarChar(200)
  number           String?   @db.VarChar(10)
  longitude        String?   @db.VarChar(20)
  latitude         String?   @db.VarChar(20)
  mapLink          String?   @db.VarChar(2000)
  city             City      @relation(fields: [cityId], references: [id])
  cityId           Int
  proposal         Proposal  @relation(fields: [proposalId], references: [id])
  proposalId       Int
}

model City {
  id    Int    @id @default(autoincrement())
  state State
  name  String @db.VarChar(100)
  well  Well[]

  @@unique([name, state])
}

enum State {
  PR
  SC
  SP
}

enum Status {
  AVAILABLE
  UNAVAILABLE
}

enum Voltage {
  V110
  V220
}

enum Side {
  LEFT
  RIGHT
}
