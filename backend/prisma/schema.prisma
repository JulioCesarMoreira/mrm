// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String @id @default(uuid())
  email     String @unique
  cognitoId String @unique @default(uuid())
  tenant    Tenant @relation(fields: [tenantId], references: [id])
  tenantId  String @default(uuid())
}

model Tenant {
  id              String            @id @default(uuid())
  cognitoId       String            @unique @default(uuid())
  User            User[]
  client          Client[]
  proposal        Proposal[]
  categoryService CategoryService[]
  modelProposal   ModelProposal[]
}

model Client {
  id           Int        @id @default(autoincrement())
  name         String
  contactName  String?
  contactPhone String?
  cpfCnpj      String     @unique
  tenant       Tenant     @relation(fields: [tenantId], references: [id])
  tenantId     String     @default(uuid())
  proposal     Proposal[]
}

model Proposal {
  id                  Int            @id @default(autoincrement())
  sendDate            DateTime?
  installmentsBalance Int?
  periodValidity      DateTime?
  discount            Int?
  percentageEntry     Int?
  guaranteePeriod     Int?
  approved            Boolean?       @default(false)
  client              Client         @relation(fields: [clientId], references: [id])
  clientId            Int
  tenant              Tenant         @relation(fields: [tenantId], references: [id])
  tenantId            String         @default(uuid())
  itemProposal        ItemProposal[]
  detection           Detection[]
  well                Well[]
}

model CategoryService {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  subCategory SubCategory
  tenant      Tenant        @relation(fields: [tenantId], references: [id])
  tenantId    String        @default(uuid())
  itemService ItemService[]
}

enum SubCategory {
  SUPLIE
  SERVICE
}

model ItemService {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  description       String
  unit              String
  status            Status
  categoryService   CategoryService     @relation(fields: [categoryServiceId], references: [id])
  categoryServiceId Int
  itemProposal      ItemProposal[]
  modelItemCategory ModelItemCategory[]
}

model ItemProposal {
  id            Int         @id @default(autoincrement())
  unitPrice     Int
  quantity      Int
  proposal      Proposal    @relation(fields: [proposalId], references: [id])
  proposalId    Int
  itemService   ItemService @relation(fields: [itemServiceId], references: [id])
  itemServiceId Int
}

model ModelProposal {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  tenant            Tenant              @relation(fields: [tenantId], references: [id])
  tenantId          String              @default(uuid())
  modelItemCategory ModelItemCategory[]
}

model ModelItemCategory {
  id              Int           @id @default(autoincrement())
  modelProposal   ModelProposal @relation(fields: [modelProposalId], references: [id])
  modelProposalId Int
  itemService     ItemService   @relation(fields: [itemServiceId], references: [id])
  itemServiceId   Int
}

model Detection {
  id           Int      @id @default(autoincrement())
  accuracy     Int
  salinity     Int
  maximumDepth Int
  minimumDepth Int
  proposal     Proposal @relation(fields: [proposalId], references: [id])
  proposalId   Int
}

model Well {
  id               Int       @id @default(autoincrement())
  voltage          Voltage?
  totalDepth       Int?
  sieveDepth       Int?
  staticLevel      Int?
  dynamicLevel     Int?
  deliveryDate     DateTime?
  sedimentaryDepth Int?
  distric          String?
  zipcode          String?
  street           String?
  number           String?
  longitude        String?
  latitude         String?
  mapLink          String?
  city             City      @relation(fields: [cityId], references: [id])
  cityId           Int
  proposal         Proposal  @relation(fields: [proposalId], references: [id])
  proposalId       Int
}

model City {
  id   Int    @id @default(autoincrement())
  uf   Uf
  name String
  well Well[]

  @@unique([name, uf])
}

enum Uf {
  PR
  SP
}

enum Status {
  AVAILABLE
  UNAVAILABLE
}

enum Voltage {
  V110
  V220
}
